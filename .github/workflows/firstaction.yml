name: Selenium Report Download Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  selenium:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Write Python script
      run: |
        echo "
        import os
        import time
        import pandas as pd
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.common.keys import Keys
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from webdriver_manager.chrome import ChromeDriverManager
        import tempfile

        def download_report(driver, wait, report_id):
            search_box = wait.until(
                EC.presence_of_element_located(
                    (By.XPATH, \"//input[@type='search' and @aria-controls='DataTables_Table_0']\")
                )
            )
            search_box.clear()
            search_box.send_keys(str(report_id))
            print(f\"🔍 Entered '{report_id}' into search box.\")
            search_box.send_keys(Keys.ENTER)
            time.sleep(3)

            actions_button = wait.until(
                EC.element_to_be_clickable(
                    (By.XPATH, \"//a[contains(text(), 'Actions') and contains(@class, 'dropdown-toggle')]\")
                )
            )
            actions_button.click()
            print(f\"⚙️ Clicked 'Actions' dropdown for report {report_id}.\")
            export_xpath = f\"//a[@href='/R{report_id}/export/xlsx' and contains(text(), 'Export Excel .xlsx')]\"
            export_option = wait.until(
                EC.element_to_be_clickable(
                    (By.XPATH, export_xpath)
                )
            )
            export_option.click()
            print(f\"📁 Clicked 'Export Excel .xlsx' for report {report_id}.\")
            time.sleep(10)

        def get_latest_excel_file():
            # Use tempfile to create a safe directory for file downloads
            download_dir = tempfile.mkdtemp()

            # Debugging step to print files in the directory
            print(f\"📂 Listing files in {download_dir}: {os.listdir(download_dir)}\")

            xlsx_files = [f for f in os.listdir(download_dir) if f.endswith('.xlsx')]

            if not xlsx_files:
                print(\"❌ No .xlsx files found in the directory.\")
                return None

            latest_file = max(
                [os.path.join(download_dir, f) for f in xlsx_files],
                key=os.path.getctime
            )
            print(f\"📄 Latest downloaded Excel file: {latest_file}\")
            return latest_file

        def print_excel_columns(filepath):
            df = pd.read_excel(filepath)
            print(\"🧾 Column names in Excel file:\")
            print(df.columns.tolist())
            return df
        " > download_reports.py

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager pandas

    - name: Run Python script
      run: |
        python download_reports.py
      env:
        SSO_USERNAME: ${{ secrets.SSO_USERNAME }}
        SSO_PASSWORD: ${{ secrets.SSO_PASSWORD }}
