name: Selenium Automation Script

on:
  push:
    branches:
      - main

jobs:
  selenium:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager pandas

    - name: Run Selenium automation script
      run: |
        python <<EOF
import os
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def download_report(driver, wait, report_id):
    # Search report
    search_box = wait.until(
        EC.presence_of_element_located(
            (By.XPATH, "//input[@type='search' and @aria-controls='DataTables_Table_0']")
        )
    )
    search_box.clear()
    search_box.send_keys(str(report_id))
    print(f"üîç Entered '{report_id}' into search box.")
    search_box.send_keys(Keys.ENTER)
    time.sleep(3)

    # Click Actions dropdown
    actions_button = wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, "//a[contains(text(), 'Actions') and contains(@class, 'dropdown-toggle')]")
        )
    )
    actions_button.click()
    print(f"‚öôÔ∏è Clicked 'Actions' dropdown for report {report_id}.")

    # Click Export Excel .xlsx link (fix XPath with report id)
    export_xpath = f"//a[@href='/R{report_id}/export/xlsx' and contains(text(), 'Export Excel .xlsx')]"
    export_option = wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, export_xpath)
        )
    )
    export_option.click()
    print(f"üìÅ Clicked 'Export Excel .xlsx' for report {report_id}.")

    # Wait for download to finish
    time.sleep(10)

def get_latest_excel_file():
    download_dir = '/home/runner/Downloads'  # Use GitHub Actions' default download directory
    xlsx_files = [f for f in os.listdir(download_dir) if f.endswith(".xlsx")]
    if not xlsx_files:
        print("‚ùå No .xlsx files found in Downloads.")
        return None
    latest_file = max(
        [os.path.join(download_dir, f) for f in xlsx_files],
        key=os.path.getctime
    )
    print(f"üìÑ Latest downloaded Excel file: {latest_file}")
    return latest_file

def print_excel_columns(filepath):
    df = pd.read_excel(filepath)
    print("üßæ Column names in Excel file:")
    print(df.columns.tolist())
    return df

# Setup Chrome options
chrome_options = Options()
chrome_options.add_argument("--start-maximized")
# chrome_options.add_argument("--headless")  # Optional: run headless

# Initialize Chrome driver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

try:
    wait = WebDriverWait(driver, 20)

    # Step 1: Open Comcast Workflow URL
    driver.get("https://workflow.cable.comcast.com/D262")

    # Step 2: Click Comcast SSO login image
    sso_button = wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, "//input[@type='image' and contains(@src, 'comcast_stack_logo_button.png')]")
        )
    )
    sso_button.click()
    print("‚úÖ Clicked Comcast SSO button.")

    # Step 3: Wait for login to complete
    wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
    time.sleep(3)

    # Step 4: Ensure dropdowns are visible (optional)
    try:
        driver.execute_script("""
            const dropdowns = document.querySelectorAll('li.dropdown-item, li.dropdown, ul.dropdown-menu');
            dropdowns.forEach(el => el.style.display = 'block');
        """)
        print("üõ† Forced dropdown visible.")
    except Exception as e:
        print(f"‚ö†Ô∏è Dropdown forcing skipped: {e}")

    # Step 5: Click 'Reports' tab
    reports_link = wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, "//a[@href='/reporting' and normalize-space(text())='Reports']")
        )
    )
    reports_link.click()
    print("‚úÖ Clicked 'Reports' link.")
    time.sleep(2)

    # Download Report 7271
    download_report(driver, wait, 7271)
    latest_file = get_latest_excel_file()
    if latest_file:
        df_7271 = print_excel_columns(latest_file)

    # Download Report 7272
    download_report(driver, wait, 7272)
    latest_file = get_latest_excel_file()
    if latest_file:
        df_7272 = print_excel_columns(latest_file)

finally:
    driver.quit()
    print("üßπ Closed browser.")
EOF
